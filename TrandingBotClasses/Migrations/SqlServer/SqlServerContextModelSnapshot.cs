// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrandingBotClasses.Context;

#nullable disable

namespace TrandingBotClasses.Migrations.SqlServer
{
    [DbContext(typeof(SqlServerContext))]
    partial class SqlServerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TrandingBotClasses.CBinance", b =>
                {
                    b.Property<Guid>("CBinanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContaId");

                    b.Property<string>("apiKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("apiSecret")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CBinanceId");

                    b.ToTable("Contas");
                });

            modelBuilder.Entity("TrandingBotClasses.Cliente", b =>
                {
                    b.Property<Guid>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CBinanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GoogleSheetsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(110)
                        .HasColumnType("nvarchar(110)");

                    b.HasKey("ClienteId");

                    b.HasIndex("CBinanceId")
                        .IsUnique();

                    b.HasIndex("GoogleSheetsId")
                        .IsUnique();

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("TrandingBotClasses.GoogleSheets", b =>
                {
                    b.Property<Guid>("GoogleSheetsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PlanilhaId");

                    b.Property<string>("SheetID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TabName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("GoogleSheetsId");

                    b.ToTable("Planilhas");
                });

            modelBuilder.Entity("TrandingBotClasses.Trade", b =>
                {
                    b.Property<Guid>("TradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContaCBinanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("comission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("comissionAsset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int>("orderId")
                        .HasColumnType("int");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("quoteQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("time")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TradeId");

                    b.HasIndex("ContaCBinanceId");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("TrandingBotClasses.Cliente", b =>
                {
                    b.HasOne("TrandingBotClasses.CBinance", "Conta")
                        .WithOne("Cliente")
                        .HasForeignKey("TrandingBotClasses.Cliente", "CBinanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrandingBotClasses.GoogleSheets", "Sheets")
                        .WithOne("Cliente")
                        .HasForeignKey("TrandingBotClasses.Cliente", "GoogleSheetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conta");

                    b.Navigation("Sheets");
                });

            modelBuilder.Entity("TrandingBotClasses.Trade", b =>
                {
                    b.HasOne("TrandingBotClasses.CBinance", "Conta")
                        .WithMany("Trades")
                        .HasForeignKey("ContaCBinanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conta");
                });

            modelBuilder.Entity("TrandingBotClasses.CBinance", b =>
                {
                    b.Navigation("Cliente")
                        .IsRequired();

                    b.Navigation("Trades");
                });

            modelBuilder.Entity("TrandingBotClasses.GoogleSheets", b =>
                {
                    b.Navigation("Cliente")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
